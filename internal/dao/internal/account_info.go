// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AccountInfoDao is the data access object for table account_info.
type AccountInfoDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns AccountInfoColumns // columns contains all the column names of Table for convenient usage.
}

// AccountInfoColumns defines and stores column names for table account_info.
type AccountInfoColumns struct {
	Id           string // id
	Account      string // 帐号
	Password     string // 密码
	IsSuperAdmin string // 是否是超级管理员
	RoleIds      string // 角色Ids
	UserSalt     string // 加密盐
	CreatedAt    string // 创建时间
	UpdatedAt    string // 更新时间
	DeletedAt    string // 删除时间
}

// accountInfoColumns holds the columns for table account_info.
var accountInfoColumns = AccountInfoColumns{
	Id:           "id",
	Account:      "account",
	Password:     "password",
	IsSuperAdmin: "is_super_admin",
	RoleIds:      "role_ids",
	UserSalt:     "user_salt",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

// NewAccountInfoDao creates and returns a new DAO object for table data access.
func NewAccountInfoDao() *AccountInfoDao {
	return &AccountInfoDao{
		group:   "default",
		table:   "account_info",
		columns: accountInfoColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AccountInfoDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AccountInfoDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *AccountInfoDao) Columns() AccountInfoColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *AccountInfoDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AccountInfoDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AccountInfoDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
